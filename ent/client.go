// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"helix.io/helix/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"helix.io/helix/ent/entemail"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EntEmail is the client for interacting with the EntEmail builders.
	EntEmail *EntEmailClient
	// EntTemporaryEmail is the client for interacting with the EntTemporaryEmail builders.
	EntTemporaryEmail *EntTemporaryEmailClient
	// EntUser is the client for interacting with the EntUser builders.
	EntUser *EntUserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EntEmail = NewEntEmailClient(c.config)
	c.EntTemporaryEmail = NewEntTemporaryEmailClient(c.config)
	c.EntUser = NewEntUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		EntEmail:          NewEntEmailClient(cfg),
		EntTemporaryEmail: NewEntTemporaryEmailClient(cfg),
		EntUser:           NewEntUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		EntEmail:          NewEntEmailClient(cfg),
		EntTemporaryEmail: NewEntTemporaryEmailClient(cfg),
		EntUser:           NewEntUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EntEmail.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EntEmail.Use(hooks...)
	c.EntTemporaryEmail.Use(hooks...)
	c.EntUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.EntEmail.Intercept(interceptors...)
	c.EntTemporaryEmail.Intercept(interceptors...)
	c.EntUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EntEmailMutation:
		return c.EntEmail.mutate(ctx, m)
	case *EntTemporaryEmailMutation:
		return c.EntTemporaryEmail.mutate(ctx, m)
	case *EntUserMutation:
		return c.EntUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EntEmailClient is a client for the EntEmail schema.
type EntEmailClient struct {
	config
}

// NewEntEmailClient returns a client for the EntEmail from the given config.
func NewEntEmailClient(c config) *EntEmailClient {
	return &EntEmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entemail.Hooks(f(g(h())))`.
func (c *EntEmailClient) Use(hooks ...Hook) {
	c.hooks.EntEmail = append(c.hooks.EntEmail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entemail.Intercept(f(g(h())))`.
func (c *EntEmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntEmail = append(c.inters.EntEmail, interceptors...)
}

// Create returns a builder for creating a EntEmail entity.
func (c *EntEmailClient) Create() *EntEmailCreate {
	mutation := newEntEmailMutation(c.config, OpCreate)
	return &EntEmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntEmail entities.
func (c *EntEmailClient) CreateBulk(builders ...*EntEmailCreate) *EntEmailCreateBulk {
	return &EntEmailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntEmailClient) MapCreateBulk(slice any, setFunc func(*EntEmailCreate, int)) *EntEmailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntEmailCreateBulk{err: fmt.Errorf("calling to EntEmailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntEmailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntEmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntEmail.
func (c *EntEmailClient) Update() *EntEmailUpdate {
	mutation := newEntEmailMutation(c.config, OpUpdate)
	return &EntEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntEmailClient) UpdateOne(ee *EntEmail) *EntEmailUpdateOne {
	mutation := newEntEmailMutation(c.config, OpUpdateOne, withEntEmail(ee))
	return &EntEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntEmailClient) UpdateOneID(id int) *EntEmailUpdateOne {
	mutation := newEntEmailMutation(c.config, OpUpdateOne, withEntEmailID(id))
	return &EntEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntEmail.
func (c *EntEmailClient) Delete() *EntEmailDelete {
	mutation := newEntEmailMutation(c.config, OpDelete)
	return &EntEmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntEmailClient) DeleteOne(ee *EntEmail) *EntEmailDeleteOne {
	return c.DeleteOneID(ee.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntEmailClient) DeleteOneID(id int) *EntEmailDeleteOne {
	builder := c.Delete().Where(entemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntEmailDeleteOne{builder}
}

// Query returns a query builder for EntEmail.
func (c *EntEmailClient) Query() *EntEmailQuery {
	return &EntEmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a EntEmail entity by its id.
func (c *EntEmailClient) Get(ctx context.Context, id int) (*EntEmail, error) {
	return c.Query().Where(entemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntEmailClient) GetX(ctx context.Context, id int) *EntEmail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntEmailClient) Hooks() []Hook {
	return c.hooks.EntEmail
}

// Interceptors returns the client interceptors.
func (c *EntEmailClient) Interceptors() []Interceptor {
	return c.inters.EntEmail
}

func (c *EntEmailClient) mutate(ctx context.Context, m *EntEmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntEmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntEmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntEmail mutation op: %q", m.Op())
	}
}

// EntTemporaryEmailClient is a client for the EntTemporaryEmail schema.
type EntTemporaryEmailClient struct {
	config
}

// NewEntTemporaryEmailClient returns a client for the EntTemporaryEmail from the given config.
func NewEntTemporaryEmailClient(c config) *EntTemporaryEmailClient {
	return &EntTemporaryEmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enttemporaryemail.Hooks(f(g(h())))`.
func (c *EntTemporaryEmailClient) Use(hooks ...Hook) {
	c.hooks.EntTemporaryEmail = append(c.hooks.EntTemporaryEmail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enttemporaryemail.Intercept(f(g(h())))`.
func (c *EntTemporaryEmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntTemporaryEmail = append(c.inters.EntTemporaryEmail, interceptors...)
}

// Create returns a builder for creating a EntTemporaryEmail entity.
func (c *EntTemporaryEmailClient) Create() *EntTemporaryEmailCreate {
	mutation := newEntTemporaryEmailMutation(c.config, OpCreate)
	return &EntTemporaryEmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntTemporaryEmail entities.
func (c *EntTemporaryEmailClient) CreateBulk(builders ...*EntTemporaryEmailCreate) *EntTemporaryEmailCreateBulk {
	return &EntTemporaryEmailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntTemporaryEmailClient) MapCreateBulk(slice any, setFunc func(*EntTemporaryEmailCreate, int)) *EntTemporaryEmailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntTemporaryEmailCreateBulk{err: fmt.Errorf("calling to EntTemporaryEmailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntTemporaryEmailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntTemporaryEmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntTemporaryEmail.
func (c *EntTemporaryEmailClient) Update() *EntTemporaryEmailUpdate {
	mutation := newEntTemporaryEmailMutation(c.config, OpUpdate)
	return &EntTemporaryEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntTemporaryEmailClient) UpdateOne(ete *EntTemporaryEmail) *EntTemporaryEmailUpdateOne {
	mutation := newEntTemporaryEmailMutation(c.config, OpUpdateOne, withEntTemporaryEmail(ete))
	return &EntTemporaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntTemporaryEmailClient) UpdateOneID(id int) *EntTemporaryEmailUpdateOne {
	mutation := newEntTemporaryEmailMutation(c.config, OpUpdateOne, withEntTemporaryEmailID(id))
	return &EntTemporaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntTemporaryEmail.
func (c *EntTemporaryEmailClient) Delete() *EntTemporaryEmailDelete {
	mutation := newEntTemporaryEmailMutation(c.config, OpDelete)
	return &EntTemporaryEmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntTemporaryEmailClient) DeleteOne(ete *EntTemporaryEmail) *EntTemporaryEmailDeleteOne {
	return c.DeleteOneID(ete.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntTemporaryEmailClient) DeleteOneID(id int) *EntTemporaryEmailDeleteOne {
	builder := c.Delete().Where(enttemporaryemail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntTemporaryEmailDeleteOne{builder}
}

// Query returns a query builder for EntTemporaryEmail.
func (c *EntTemporaryEmailClient) Query() *EntTemporaryEmailQuery {
	return &EntTemporaryEmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntTemporaryEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a EntTemporaryEmail entity by its id.
func (c *EntTemporaryEmailClient) Get(ctx context.Context, id int) (*EntTemporaryEmail, error) {
	return c.Query().Where(enttemporaryemail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntTemporaryEmailClient) GetX(ctx context.Context, id int) *EntTemporaryEmail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a EntTemporaryEmail.
func (c *EntTemporaryEmailClient) QueryOwner(ete *EntTemporaryEmail) *EntUserQuery {
	query := (&EntUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ete.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enttemporaryemail.Table, enttemporaryemail.FieldID, id),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enttemporaryemail.OwnerTable, enttemporaryemail.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ete.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntTemporaryEmailClient) Hooks() []Hook {
	return c.hooks.EntTemporaryEmail
}

// Interceptors returns the client interceptors.
func (c *EntTemporaryEmailClient) Interceptors() []Interceptor {
	return c.inters.EntTemporaryEmail
}

func (c *EntTemporaryEmailClient) mutate(ctx context.Context, m *EntTemporaryEmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntTemporaryEmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntTemporaryEmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntTemporaryEmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntTemporaryEmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntTemporaryEmail mutation op: %q", m.Op())
	}
}

// EntUserClient is a client for the EntUser schema.
type EntUserClient struct {
	config
}

// NewEntUserClient returns a client for the EntUser from the given config.
func NewEntUserClient(c config) *EntUserClient {
	return &EntUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entuser.Hooks(f(g(h())))`.
func (c *EntUserClient) Use(hooks ...Hook) {
	c.hooks.EntUser = append(c.hooks.EntUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entuser.Intercept(f(g(h())))`.
func (c *EntUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntUser = append(c.inters.EntUser, interceptors...)
}

// Create returns a builder for creating a EntUser entity.
func (c *EntUserClient) Create() *EntUserCreate {
	mutation := newEntUserMutation(c.config, OpCreate)
	return &EntUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntUser entities.
func (c *EntUserClient) CreateBulk(builders ...*EntUserCreate) *EntUserCreateBulk {
	return &EntUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntUserClient) MapCreateBulk(slice any, setFunc func(*EntUserCreate, int)) *EntUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntUserCreateBulk{err: fmt.Errorf("calling to EntUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntUser.
func (c *EntUserClient) Update() *EntUserUpdate {
	mutation := newEntUserMutation(c.config, OpUpdate)
	return &EntUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntUserClient) UpdateOne(eu *EntUser) *EntUserUpdateOne {
	mutation := newEntUserMutation(c.config, OpUpdateOne, withEntUser(eu))
	return &EntUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntUserClient) UpdateOneID(id int) *EntUserUpdateOne {
	mutation := newEntUserMutation(c.config, OpUpdateOne, withEntUserID(id))
	return &EntUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntUser.
func (c *EntUserClient) Delete() *EntUserDelete {
	mutation := newEntUserMutation(c.config, OpDelete)
	return &EntUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntUserClient) DeleteOne(eu *EntUser) *EntUserDeleteOne {
	return c.DeleteOneID(eu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntUserClient) DeleteOneID(id int) *EntUserDeleteOne {
	builder := c.Delete().Where(entuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntUserDeleteOne{builder}
}

// Query returns a query builder for EntUser.
func (c *EntUserClient) Query() *EntUserQuery {
	return &EntUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntUser},
		inters: c.Interceptors(),
	}
}

// Get returns a EntUser entity by its id.
func (c *EntUserClient) Get(ctx context.Context, id int) (*EntUser, error) {
	return c.Query().Where(entuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntUserClient) GetX(ctx context.Context, id int) *EntUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwns queries the owns edge of a EntUser.
func (c *EntUserClient) QueryOwns(eu *EntUser) *EntTemporaryEmailQuery {
	query := (&EntTemporaryEmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entuser.Table, entuser.FieldID, id),
			sqlgraph.To(enttemporaryemail.Table, enttemporaryemail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entuser.OwnsTable, entuser.OwnsColumn),
		)
		fromV = sqlgraph.Neighbors(eu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntUserClient) Hooks() []Hook {
	return c.hooks.EntUser
}

// Interceptors returns the client interceptors.
func (c *EntUserClient) Interceptors() []Interceptor {
	return c.inters.EntUser
}

func (c *EntUserClient) mutate(ctx context.Context, m *EntUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EntEmail, EntTemporaryEmail, EntUser []ent.Hook
	}
	inters struct {
		EntEmail, EntTemporaryEmail, EntUser []ent.Interceptor
	}
)
