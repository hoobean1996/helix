// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
)

// EntUserCreate is the builder for creating a EntUser entity.
type EntUserCreate struct {
	config
	mutation *EntUserMutation
	hooks    []Hook
}

// SetAccount sets the "account" field.
func (euc *EntUserCreate) SetAccount(s string) *EntUserCreate {
	euc.mutation.SetAccount(s)
	return euc
}

// AddOwnIDs adds the "owns" edge to the EntTemporaryEmail entity by IDs.
func (euc *EntUserCreate) AddOwnIDs(ids ...int) *EntUserCreate {
	euc.mutation.AddOwnIDs(ids...)
	return euc
}

// AddOwns adds the "owns" edges to the EntTemporaryEmail entity.
func (euc *EntUserCreate) AddOwns(e ...*EntTemporaryEmail) *EntUserCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euc.AddOwnIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euc *EntUserCreate) Mutation() *EntUserMutation {
	return euc.mutation
}

// Save creates the EntUser in the database.
func (euc *EntUserCreate) Save(ctx context.Context) (*EntUser, error) {
	return withHooks(ctx, euc.sqlSave, euc.mutation, euc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (euc *EntUserCreate) SaveX(ctx context.Context) *EntUser {
	v, err := euc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (euc *EntUserCreate) Exec(ctx context.Context) error {
	_, err := euc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euc *EntUserCreate) ExecX(ctx context.Context) {
	if err := euc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euc *EntUserCreate) check() error {
	if _, ok := euc.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "EntUser.account"`)}
	}
	return nil
}

func (euc *EntUserCreate) sqlSave(ctx context.Context) (*EntUser, error) {
	if err := euc.check(); err != nil {
		return nil, err
	}
	_node, _spec := euc.createSpec()
	if err := sqlgraph.CreateNode(ctx, euc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	euc.mutation.id = &_node.ID
	euc.mutation.done = true
	return _node, nil
}

func (euc *EntUserCreate) createSpec() (*EntUser, *sqlgraph.CreateSpec) {
	var (
		_node = &EntUser{config: euc.config}
		_spec = sqlgraph.NewCreateSpec(entuser.Table, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt))
	)
	if value, ok := euc.mutation.Account(); ok {
		_spec.SetField(entuser.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if nodes := euc.mutation.OwnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntUserCreateBulk is the builder for creating many EntUser entities in bulk.
type EntUserCreateBulk struct {
	config
	err      error
	builders []*EntUserCreate
}

// Save creates the EntUser entities in the database.
func (eucb *EntUserCreateBulk) Save(ctx context.Context) ([]*EntUser, error) {
	if eucb.err != nil {
		return nil, eucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eucb.builders))
	nodes := make([]*EntUser, len(eucb.builders))
	mutators := make([]Mutator, len(eucb.builders))
	for i := range eucb.builders {
		func(i int, root context.Context) {
			builder := eucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eucb *EntUserCreateBulk) SaveX(ctx context.Context) []*EntUser {
	v, err := eucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eucb *EntUserCreateBulk) Exec(ctx context.Context) error {
	_, err := eucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eucb *EntUserCreateBulk) ExecX(ctx context.Context) {
	if err := eucb.Exec(ctx); err != nil {
		panic(err)
	}
}
