// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/entemail"
)

// EntEmailCreate is the builder for creating a EntEmail entity.
type EntEmailCreate struct {
	config
	mutation *EntEmailMutation
	hooks    []Hook
}

// SetFrom sets the "from" field.
func (eec *EntEmailCreate) SetFrom(s string) *EntEmailCreate {
	eec.mutation.SetFrom(s)
	return eec
}

// SetTo sets the "to" field.
func (eec *EntEmailCreate) SetTo(s []string) *EntEmailCreate {
	eec.mutation.SetTo(s)
	return eec
}

// SetDate sets the "date" field.
func (eec *EntEmailCreate) SetDate(s string) *EntEmailCreate {
	eec.mutation.SetDate(s)
	return eec
}

// SetTopic sets the "topic" field.
func (eec *EntEmailCreate) SetTopic(s string) *EntEmailCreate {
	eec.mutation.SetTopic(s)
	return eec
}

// SetBody sets the "body" field.
func (eec *EntEmailCreate) SetBody(s string) *EntEmailCreate {
	eec.mutation.SetBody(s)
	return eec
}

// Mutation returns the EntEmailMutation object of the builder.
func (eec *EntEmailCreate) Mutation() *EntEmailMutation {
	return eec.mutation
}

// Save creates the EntEmail in the database.
func (eec *EntEmailCreate) Save(ctx context.Context) (*EntEmail, error) {
	return withHooks(ctx, eec.sqlSave, eec.mutation, eec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eec *EntEmailCreate) SaveX(ctx context.Context) *EntEmail {
	v, err := eec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eec *EntEmailCreate) Exec(ctx context.Context) error {
	_, err := eec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eec *EntEmailCreate) ExecX(ctx context.Context) {
	if err := eec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eec *EntEmailCreate) check() error {
	if _, ok := eec.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "EntEmail.from"`)}
	}
	if _, ok := eec.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "EntEmail.to"`)}
	}
	if _, ok := eec.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "EntEmail.date"`)}
	}
	if _, ok := eec.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "EntEmail.topic"`)}
	}
	if _, ok := eec.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "EntEmail.body"`)}
	}
	return nil
}

func (eec *EntEmailCreate) sqlSave(ctx context.Context) (*EntEmail, error) {
	if err := eec.check(); err != nil {
		return nil, err
	}
	_node, _spec := eec.createSpec()
	if err := sqlgraph.CreateNode(ctx, eec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eec.mutation.id = &_node.ID
	eec.mutation.done = true
	return _node, nil
}

func (eec *EntEmailCreate) createSpec() (*EntEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &EntEmail{config: eec.config}
		_spec = sqlgraph.NewCreateSpec(entemail.Table, sqlgraph.NewFieldSpec(entemail.FieldID, field.TypeInt))
	)
	if value, ok := eec.mutation.From(); ok {
		_spec.SetField(entemail.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := eec.mutation.To(); ok {
		_spec.SetField(entemail.FieldTo, field.TypeJSON, value)
		_node.To = value
	}
	if value, ok := eec.mutation.Date(); ok {
		_spec.SetField(entemail.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := eec.mutation.Topic(); ok {
		_spec.SetField(entemail.FieldTopic, field.TypeString, value)
		_node.Topic = value
	}
	if value, ok := eec.mutation.Body(); ok {
		_spec.SetField(entemail.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	return _node, _spec
}

// EntEmailCreateBulk is the builder for creating many EntEmail entities in bulk.
type EntEmailCreateBulk struct {
	config
	err      error
	builders []*EntEmailCreate
}

// Save creates the EntEmail entities in the database.
func (eecb *EntEmailCreateBulk) Save(ctx context.Context) ([]*EntEmail, error) {
	if eecb.err != nil {
		return nil, eecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eecb.builders))
	nodes := make([]*EntEmail, len(eecb.builders))
	mutators := make([]Mutator, len(eecb.builders))
	for i := range eecb.builders {
		func(i int, root context.Context) {
			builder := eecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eecb *EntEmailCreateBulk) SaveX(ctx context.Context) []*EntEmail {
	v, err := eecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eecb *EntEmailCreateBulk) Exec(ctx context.Context) error {
	_, err := eecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eecb *EntEmailCreateBulk) ExecX(ctx context.Context) {
	if err := eecb.Exec(ctx); err != nil {
		panic(err)
	}
}
