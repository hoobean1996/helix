// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
	"helix.io/helix/ent/predicate"
)

// EntTemporaryEmailQuery is the builder for querying EntTemporaryEmail entities.
type EntTemporaryEmailQuery struct {
	config
	ctx        *QueryContext
	order      []enttemporaryemail.OrderOption
	inters     []Interceptor
	predicates []predicate.EntTemporaryEmail
	withOwner  *EntUserQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*EntTemporaryEmail) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntTemporaryEmailQuery builder.
func (eteq *EntTemporaryEmailQuery) Where(ps ...predicate.EntTemporaryEmail) *EntTemporaryEmailQuery {
	eteq.predicates = append(eteq.predicates, ps...)
	return eteq
}

// Limit the number of records to be returned by this query.
func (eteq *EntTemporaryEmailQuery) Limit(limit int) *EntTemporaryEmailQuery {
	eteq.ctx.Limit = &limit
	return eteq
}

// Offset to start from.
func (eteq *EntTemporaryEmailQuery) Offset(offset int) *EntTemporaryEmailQuery {
	eteq.ctx.Offset = &offset
	return eteq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eteq *EntTemporaryEmailQuery) Unique(unique bool) *EntTemporaryEmailQuery {
	eteq.ctx.Unique = &unique
	return eteq
}

// Order specifies how the records should be ordered.
func (eteq *EntTemporaryEmailQuery) Order(o ...enttemporaryemail.OrderOption) *EntTemporaryEmailQuery {
	eteq.order = append(eteq.order, o...)
	return eteq
}

// QueryOwner chains the current query on the "owner" edge.
func (eteq *EntTemporaryEmailQuery) QueryOwner() *EntUserQuery {
	query := (&EntUserClient{config: eteq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eteq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eteq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enttemporaryemail.Table, enttemporaryemail.FieldID, selector),
			sqlgraph.To(entuser.Table, entuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enttemporaryemail.OwnerTable, enttemporaryemail.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(eteq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntTemporaryEmail entity from the query.
// Returns a *NotFoundError when no EntTemporaryEmail was found.
func (eteq *EntTemporaryEmailQuery) First(ctx context.Context) (*EntTemporaryEmail, error) {
	nodes, err := eteq.Limit(1).All(setContextOp(ctx, eteq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enttemporaryemail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) FirstX(ctx context.Context) *EntTemporaryEmail {
	node, err := eteq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntTemporaryEmail ID from the query.
// Returns a *NotFoundError when no EntTemporaryEmail ID was found.
func (eteq *EntTemporaryEmailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eteq.Limit(1).IDs(setContextOp(ctx, eteq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enttemporaryemail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) FirstIDX(ctx context.Context) int {
	id, err := eteq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntTemporaryEmail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntTemporaryEmail entity is found.
// Returns a *NotFoundError when no EntTemporaryEmail entities are found.
func (eteq *EntTemporaryEmailQuery) Only(ctx context.Context) (*EntTemporaryEmail, error) {
	nodes, err := eteq.Limit(2).All(setContextOp(ctx, eteq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enttemporaryemail.Label}
	default:
		return nil, &NotSingularError{enttemporaryemail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) OnlyX(ctx context.Context) *EntTemporaryEmail {
	node, err := eteq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntTemporaryEmail ID in the query.
// Returns a *NotSingularError when more than one EntTemporaryEmail ID is found.
// Returns a *NotFoundError when no entities are found.
func (eteq *EntTemporaryEmailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eteq.Limit(2).IDs(setContextOp(ctx, eteq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enttemporaryemail.Label}
	default:
		err = &NotSingularError{enttemporaryemail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) OnlyIDX(ctx context.Context) int {
	id, err := eteq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntTemporaryEmails.
func (eteq *EntTemporaryEmailQuery) All(ctx context.Context) ([]*EntTemporaryEmail, error) {
	ctx = setContextOp(ctx, eteq.ctx, ent.OpQueryAll)
	if err := eteq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EntTemporaryEmail, *EntTemporaryEmailQuery]()
	return withInterceptors[[]*EntTemporaryEmail](ctx, eteq, qr, eteq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) AllX(ctx context.Context) []*EntTemporaryEmail {
	nodes, err := eteq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntTemporaryEmail IDs.
func (eteq *EntTemporaryEmailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eteq.ctx.Unique == nil && eteq.path != nil {
		eteq.Unique(true)
	}
	ctx = setContextOp(ctx, eteq.ctx, ent.OpQueryIDs)
	if err = eteq.Select(enttemporaryemail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) IDsX(ctx context.Context) []int {
	ids, err := eteq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eteq *EntTemporaryEmailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eteq.ctx, ent.OpQueryCount)
	if err := eteq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eteq, querierCount[*EntTemporaryEmailQuery](), eteq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) CountX(ctx context.Context) int {
	count, err := eteq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eteq *EntTemporaryEmailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eteq.ctx, ent.OpQueryExist)
	switch _, err := eteq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eteq *EntTemporaryEmailQuery) ExistX(ctx context.Context) bool {
	exist, err := eteq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntTemporaryEmailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eteq *EntTemporaryEmailQuery) Clone() *EntTemporaryEmailQuery {
	if eteq == nil {
		return nil
	}
	return &EntTemporaryEmailQuery{
		config:     eteq.config,
		ctx:        eteq.ctx.Clone(),
		order:      append([]enttemporaryemail.OrderOption{}, eteq.order...),
		inters:     append([]Interceptor{}, eteq.inters...),
		predicates: append([]predicate.EntTemporaryEmail{}, eteq.predicates...),
		withOwner:  eteq.withOwner.Clone(),
		// clone intermediate query.
		sql:  eteq.sql.Clone(),
		path: eteq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (eteq *EntTemporaryEmailQuery) WithOwner(opts ...func(*EntUserQuery)) *EntTemporaryEmailQuery {
	query := (&EntUserClient{config: eteq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eteq.withOwner = query
	return eteq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntTemporaryEmail.Query().
//		GroupBy(enttemporaryemail.FieldEmail).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eteq *EntTemporaryEmailQuery) GroupBy(field string, fields ...string) *EntTemporaryEmailGroupBy {
	eteq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntTemporaryEmailGroupBy{build: eteq}
	grbuild.flds = &eteq.ctx.Fields
	grbuild.label = enttemporaryemail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Email string `json:"email,omitempty"`
//	}
//
//	client.EntTemporaryEmail.Query().
//		Select(enttemporaryemail.FieldEmail).
//		Scan(ctx, &v)
func (eteq *EntTemporaryEmailQuery) Select(fields ...string) *EntTemporaryEmailSelect {
	eteq.ctx.Fields = append(eteq.ctx.Fields, fields...)
	sbuild := &EntTemporaryEmailSelect{EntTemporaryEmailQuery: eteq}
	sbuild.label = enttemporaryemail.Label
	sbuild.flds, sbuild.scan = &eteq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntTemporaryEmailSelect configured with the given aggregations.
func (eteq *EntTemporaryEmailQuery) Aggregate(fns ...AggregateFunc) *EntTemporaryEmailSelect {
	return eteq.Select().Aggregate(fns...)
}

func (eteq *EntTemporaryEmailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eteq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eteq); err != nil {
				return err
			}
		}
	}
	for _, f := range eteq.ctx.Fields {
		if !enttemporaryemail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eteq.path != nil {
		prev, err := eteq.path(ctx)
		if err != nil {
			return err
		}
		eteq.sql = prev
	}
	return nil
}

func (eteq *EntTemporaryEmailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntTemporaryEmail, error) {
	var (
		nodes       = []*EntTemporaryEmail{}
		withFKs     = eteq.withFKs
		_spec       = eteq.querySpec()
		loadedTypes = [1]bool{
			eteq.withOwner != nil,
		}
	)
	if eteq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, enttemporaryemail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EntTemporaryEmail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EntTemporaryEmail{config: eteq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eteq.modifiers) > 0 {
		_spec.Modifiers = eteq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eteq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eteq.withOwner; query != nil {
		if err := eteq.loadOwner(ctx, query, nodes, nil,
			func(n *EntTemporaryEmail, e *EntUser) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	for i := range eteq.loadTotal {
		if err := eteq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eteq *EntTemporaryEmailQuery) loadOwner(ctx context.Context, query *EntUserQuery, nodes []*EntTemporaryEmail, init func(*EntTemporaryEmail), assign func(*EntTemporaryEmail, *EntUser)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*EntTemporaryEmail)
	for i := range nodes {
		if nodes[i].ent_user_owns == nil {
			continue
		}
		fk := *nodes[i].ent_user_owns
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ent_user_owns" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eteq *EntTemporaryEmailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eteq.querySpec()
	if len(eteq.modifiers) > 0 {
		_spec.Modifiers = eteq.modifiers
	}
	_spec.Node.Columns = eteq.ctx.Fields
	if len(eteq.ctx.Fields) > 0 {
		_spec.Unique = eteq.ctx.Unique != nil && *eteq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eteq.driver, _spec)
}

func (eteq *EntTemporaryEmailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(enttemporaryemail.Table, enttemporaryemail.Columns, sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt))
	_spec.From = eteq.sql
	if unique := eteq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eteq.path != nil {
		_spec.Unique = true
	}
	if fields := eteq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttemporaryemail.FieldID)
		for i := range fields {
			if fields[i] != enttemporaryemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eteq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eteq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eteq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eteq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eteq *EntTemporaryEmailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eteq.driver.Dialect())
	t1 := builder.Table(enttemporaryemail.Table)
	columns := eteq.ctx.Fields
	if len(columns) == 0 {
		columns = enttemporaryemail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eteq.sql != nil {
		selector = eteq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eteq.ctx.Unique != nil && *eteq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eteq.predicates {
		p(selector)
	}
	for _, p := range eteq.order {
		p(selector)
	}
	if offset := eteq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eteq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntTemporaryEmailGroupBy is the group-by builder for EntTemporaryEmail entities.
type EntTemporaryEmailGroupBy struct {
	selector
	build *EntTemporaryEmailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (etegb *EntTemporaryEmailGroupBy) Aggregate(fns ...AggregateFunc) *EntTemporaryEmailGroupBy {
	etegb.fns = append(etegb.fns, fns...)
	return etegb
}

// Scan applies the selector query and scans the result into the given value.
func (etegb *EntTemporaryEmailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, etegb.build.ctx, ent.OpQueryGroupBy)
	if err := etegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntTemporaryEmailQuery, *EntTemporaryEmailGroupBy](ctx, etegb.build, etegb, etegb.build.inters, v)
}

func (etegb *EntTemporaryEmailGroupBy) sqlScan(ctx context.Context, root *EntTemporaryEmailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(etegb.fns))
	for _, fn := range etegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*etegb.flds)+len(etegb.fns))
		for _, f := range *etegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*etegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntTemporaryEmailSelect is the builder for selecting fields of EntTemporaryEmail entities.
type EntTemporaryEmailSelect struct {
	*EntTemporaryEmailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (etes *EntTemporaryEmailSelect) Aggregate(fns ...AggregateFunc) *EntTemporaryEmailSelect {
	etes.fns = append(etes.fns, fns...)
	return etes
}

// Scan applies the selector query and scans the result into the given value.
func (etes *EntTemporaryEmailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, etes.ctx, ent.OpQuerySelect)
	if err := etes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntTemporaryEmailQuery, *EntTemporaryEmailSelect](ctx, etes.EntTemporaryEmailQuery, etes, etes.inters, v)
}

func (etes *EntTemporaryEmailSelect) sqlScan(ctx context.Context, root *EntTemporaryEmailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(etes.fns))
	for _, fn := range etes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*etes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := etes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
