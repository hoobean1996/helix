// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/entemail"
	"helix.io/helix/ent/predicate"
)

// EntEmailUpdate is the builder for updating EntEmail entities.
type EntEmailUpdate struct {
	config
	hooks    []Hook
	mutation *EntEmailMutation
}

// Where appends a list predicates to the EntEmailUpdate builder.
func (eeu *EntEmailUpdate) Where(ps ...predicate.EntEmail) *EntEmailUpdate {
	eeu.mutation.Where(ps...)
	return eeu
}

// SetFrom sets the "from" field.
func (eeu *EntEmailUpdate) SetFrom(s string) *EntEmailUpdate {
	eeu.mutation.SetFrom(s)
	return eeu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (eeu *EntEmailUpdate) SetNillableFrom(s *string) *EntEmailUpdate {
	if s != nil {
		eeu.SetFrom(*s)
	}
	return eeu
}

// SetTo sets the "to" field.
func (eeu *EntEmailUpdate) SetTo(s []string) *EntEmailUpdate {
	eeu.mutation.SetTo(s)
	return eeu
}

// AppendTo appends s to the "to" field.
func (eeu *EntEmailUpdate) AppendTo(s []string) *EntEmailUpdate {
	eeu.mutation.AppendTo(s)
	return eeu
}

// SetDate sets the "date" field.
func (eeu *EntEmailUpdate) SetDate(s string) *EntEmailUpdate {
	eeu.mutation.SetDate(s)
	return eeu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (eeu *EntEmailUpdate) SetNillableDate(s *string) *EntEmailUpdate {
	if s != nil {
		eeu.SetDate(*s)
	}
	return eeu
}

// SetTopic sets the "topic" field.
func (eeu *EntEmailUpdate) SetTopic(s string) *EntEmailUpdate {
	eeu.mutation.SetTopic(s)
	return eeu
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (eeu *EntEmailUpdate) SetNillableTopic(s *string) *EntEmailUpdate {
	if s != nil {
		eeu.SetTopic(*s)
	}
	return eeu
}

// SetBody sets the "body" field.
func (eeu *EntEmailUpdate) SetBody(s string) *EntEmailUpdate {
	eeu.mutation.SetBody(s)
	return eeu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (eeu *EntEmailUpdate) SetNillableBody(s *string) *EntEmailUpdate {
	if s != nil {
		eeu.SetBody(*s)
	}
	return eeu
}

// Mutation returns the EntEmailMutation object of the builder.
func (eeu *EntEmailUpdate) Mutation() *EntEmailMutation {
	return eeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eeu *EntEmailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eeu.sqlSave, eeu.mutation, eeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eeu *EntEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eeu *EntEmailUpdate) Exec(ctx context.Context) error {
	_, err := eeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eeu *EntEmailUpdate) ExecX(ctx context.Context) {
	if err := eeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eeu *EntEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entemail.Table, entemail.Columns, sqlgraph.NewFieldSpec(entemail.FieldID, field.TypeInt))
	if ps := eeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eeu.mutation.From(); ok {
		_spec.SetField(entemail.FieldFrom, field.TypeString, value)
	}
	if value, ok := eeu.mutation.To(); ok {
		_spec.SetField(entemail.FieldTo, field.TypeJSON, value)
	}
	if value, ok := eeu.mutation.AppendedTo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entemail.FieldTo, value)
		})
	}
	if value, ok := eeu.mutation.Date(); ok {
		_spec.SetField(entemail.FieldDate, field.TypeString, value)
	}
	if value, ok := eeu.mutation.Topic(); ok {
		_spec.SetField(entemail.FieldTopic, field.TypeString, value)
	}
	if value, ok := eeu.mutation.Body(); ok {
		_spec.SetField(entemail.FieldBody, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eeu.mutation.done = true
	return n, nil
}

// EntEmailUpdateOne is the builder for updating a single EntEmail entity.
type EntEmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntEmailMutation
}

// SetFrom sets the "from" field.
func (eeuo *EntEmailUpdateOne) SetFrom(s string) *EntEmailUpdateOne {
	eeuo.mutation.SetFrom(s)
	return eeuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (eeuo *EntEmailUpdateOne) SetNillableFrom(s *string) *EntEmailUpdateOne {
	if s != nil {
		eeuo.SetFrom(*s)
	}
	return eeuo
}

// SetTo sets the "to" field.
func (eeuo *EntEmailUpdateOne) SetTo(s []string) *EntEmailUpdateOne {
	eeuo.mutation.SetTo(s)
	return eeuo
}

// AppendTo appends s to the "to" field.
func (eeuo *EntEmailUpdateOne) AppendTo(s []string) *EntEmailUpdateOne {
	eeuo.mutation.AppendTo(s)
	return eeuo
}

// SetDate sets the "date" field.
func (eeuo *EntEmailUpdateOne) SetDate(s string) *EntEmailUpdateOne {
	eeuo.mutation.SetDate(s)
	return eeuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (eeuo *EntEmailUpdateOne) SetNillableDate(s *string) *EntEmailUpdateOne {
	if s != nil {
		eeuo.SetDate(*s)
	}
	return eeuo
}

// SetTopic sets the "topic" field.
func (eeuo *EntEmailUpdateOne) SetTopic(s string) *EntEmailUpdateOne {
	eeuo.mutation.SetTopic(s)
	return eeuo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (eeuo *EntEmailUpdateOne) SetNillableTopic(s *string) *EntEmailUpdateOne {
	if s != nil {
		eeuo.SetTopic(*s)
	}
	return eeuo
}

// SetBody sets the "body" field.
func (eeuo *EntEmailUpdateOne) SetBody(s string) *EntEmailUpdateOne {
	eeuo.mutation.SetBody(s)
	return eeuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (eeuo *EntEmailUpdateOne) SetNillableBody(s *string) *EntEmailUpdateOne {
	if s != nil {
		eeuo.SetBody(*s)
	}
	return eeuo
}

// Mutation returns the EntEmailMutation object of the builder.
func (eeuo *EntEmailUpdateOne) Mutation() *EntEmailMutation {
	return eeuo.mutation
}

// Where appends a list predicates to the EntEmailUpdate builder.
func (eeuo *EntEmailUpdateOne) Where(ps ...predicate.EntEmail) *EntEmailUpdateOne {
	eeuo.mutation.Where(ps...)
	return eeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eeuo *EntEmailUpdateOne) Select(field string, fields ...string) *EntEmailUpdateOne {
	eeuo.fields = append([]string{field}, fields...)
	return eeuo
}

// Save executes the query and returns the updated EntEmail entity.
func (eeuo *EntEmailUpdateOne) Save(ctx context.Context) (*EntEmail, error) {
	return withHooks(ctx, eeuo.sqlSave, eeuo.mutation, eeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eeuo *EntEmailUpdateOne) SaveX(ctx context.Context) *EntEmail {
	node, err := eeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eeuo *EntEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := eeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eeuo *EntEmailUpdateOne) ExecX(ctx context.Context) {
	if err := eeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eeuo *EntEmailUpdateOne) sqlSave(ctx context.Context) (_node *EntEmail, err error) {
	_spec := sqlgraph.NewUpdateSpec(entemail.Table, entemail.Columns, sqlgraph.NewFieldSpec(entemail.FieldID, field.TypeInt))
	id, ok := eeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entemail.FieldID)
		for _, f := range fields {
			if !entemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eeuo.mutation.From(); ok {
		_spec.SetField(entemail.FieldFrom, field.TypeString, value)
	}
	if value, ok := eeuo.mutation.To(); ok {
		_spec.SetField(entemail.FieldTo, field.TypeJSON, value)
	}
	if value, ok := eeuo.mutation.AppendedTo(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entemail.FieldTo, value)
		})
	}
	if value, ok := eeuo.mutation.Date(); ok {
		_spec.SetField(entemail.FieldDate, field.TypeString, value)
	}
	if value, ok := eeuo.mutation.Topic(); ok {
		_spec.SetField(entemail.FieldTopic, field.TypeString, value)
	}
	if value, ok := eeuo.mutation.Body(); ok {
		_spec.SetField(entemail.FieldBody, field.TypeString, value)
	}
	_node = &EntEmail{config: eeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eeuo.mutation.done = true
	return _node, nil
}
