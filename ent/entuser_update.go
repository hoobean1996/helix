// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
	"helix.io/helix/ent/predicate"
)

// EntUserUpdate is the builder for updating EntUser entities.
type EntUserUpdate struct {
	config
	hooks    []Hook
	mutation *EntUserMutation
}

// Where appends a list predicates to the EntUserUpdate builder.
func (euu *EntUserUpdate) Where(ps ...predicate.EntUser) *EntUserUpdate {
	euu.mutation.Where(ps...)
	return euu
}

// SetAccount sets the "account" field.
func (euu *EntUserUpdate) SetAccount(s string) *EntUserUpdate {
	euu.mutation.SetAccount(s)
	return euu
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (euu *EntUserUpdate) SetNillableAccount(s *string) *EntUserUpdate {
	if s != nil {
		euu.SetAccount(*s)
	}
	return euu
}

// AddOwnIDs adds the "owns" edge to the EntTemporaryEmail entity by IDs.
func (euu *EntUserUpdate) AddOwnIDs(ids ...int) *EntUserUpdate {
	euu.mutation.AddOwnIDs(ids...)
	return euu
}

// AddOwns adds the "owns" edges to the EntTemporaryEmail entity.
func (euu *EntUserUpdate) AddOwns(e ...*EntTemporaryEmail) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.AddOwnIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euu *EntUserUpdate) Mutation() *EntUserMutation {
	return euu.mutation
}

// ClearOwns clears all "owns" edges to the EntTemporaryEmail entity.
func (euu *EntUserUpdate) ClearOwns() *EntUserUpdate {
	euu.mutation.ClearOwns()
	return euu
}

// RemoveOwnIDs removes the "owns" edge to EntTemporaryEmail entities by IDs.
func (euu *EntUserUpdate) RemoveOwnIDs(ids ...int) *EntUserUpdate {
	euu.mutation.RemoveOwnIDs(ids...)
	return euu
}

// RemoveOwns removes "owns" edges to EntTemporaryEmail entities.
func (euu *EntUserUpdate) RemoveOwns(e ...*EntTemporaryEmail) *EntUserUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euu.RemoveOwnIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (euu *EntUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, euu.sqlSave, euu.mutation, euu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euu *EntUserUpdate) SaveX(ctx context.Context) int {
	affected, err := euu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (euu *EntUserUpdate) Exec(ctx context.Context) error {
	_, err := euu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euu *EntUserUpdate) ExecX(ctx context.Context) {
	if err := euu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euu *EntUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt))
	if ps := euu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euu.mutation.Account(); ok {
		_spec.SetField(entuser.FieldAccount, field.TypeString, value)
	}
	if euu.mutation.OwnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.RemovedOwnsIDs(); len(nodes) > 0 && !euu.mutation.OwnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euu.mutation.OwnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, euu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	euu.mutation.done = true
	return n, nil
}

// EntUserUpdateOne is the builder for updating a single EntUser entity.
type EntUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntUserMutation
}

// SetAccount sets the "account" field.
func (euuo *EntUserUpdateOne) SetAccount(s string) *EntUserUpdateOne {
	euuo.mutation.SetAccount(s)
	return euuo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (euuo *EntUserUpdateOne) SetNillableAccount(s *string) *EntUserUpdateOne {
	if s != nil {
		euuo.SetAccount(*s)
	}
	return euuo
}

// AddOwnIDs adds the "owns" edge to the EntTemporaryEmail entity by IDs.
func (euuo *EntUserUpdateOne) AddOwnIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.AddOwnIDs(ids...)
	return euuo
}

// AddOwns adds the "owns" edges to the EntTemporaryEmail entity.
func (euuo *EntUserUpdateOne) AddOwns(e ...*EntTemporaryEmail) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.AddOwnIDs(ids...)
}

// Mutation returns the EntUserMutation object of the builder.
func (euuo *EntUserUpdateOne) Mutation() *EntUserMutation {
	return euuo.mutation
}

// ClearOwns clears all "owns" edges to the EntTemporaryEmail entity.
func (euuo *EntUserUpdateOne) ClearOwns() *EntUserUpdateOne {
	euuo.mutation.ClearOwns()
	return euuo
}

// RemoveOwnIDs removes the "owns" edge to EntTemporaryEmail entities by IDs.
func (euuo *EntUserUpdateOne) RemoveOwnIDs(ids ...int) *EntUserUpdateOne {
	euuo.mutation.RemoveOwnIDs(ids...)
	return euuo
}

// RemoveOwns removes "owns" edges to EntTemporaryEmail entities.
func (euuo *EntUserUpdateOne) RemoveOwns(e ...*EntTemporaryEmail) *EntUserUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euuo.RemoveOwnIDs(ids...)
}

// Where appends a list predicates to the EntUserUpdate builder.
func (euuo *EntUserUpdateOne) Where(ps ...predicate.EntUser) *EntUserUpdateOne {
	euuo.mutation.Where(ps...)
	return euuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euuo *EntUserUpdateOne) Select(field string, fields ...string) *EntUserUpdateOne {
	euuo.fields = append([]string{field}, fields...)
	return euuo
}

// Save executes the query and returns the updated EntUser entity.
func (euuo *EntUserUpdateOne) Save(ctx context.Context) (*EntUser, error) {
	return withHooks(ctx, euuo.sqlSave, euuo.mutation, euuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euuo *EntUserUpdateOne) SaveX(ctx context.Context) *EntUser {
	node, err := euuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euuo *EntUserUpdateOne) Exec(ctx context.Context) error {
	_, err := euuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euuo *EntUserUpdateOne) ExecX(ctx context.Context) {
	if err := euuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euuo *EntUserUpdateOne) sqlSave(ctx context.Context) (_node *EntUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(entuser.Table, entuser.Columns, sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt))
	id, ok := euuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entuser.FieldID)
		for _, f := range fields {
			if !entuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euuo.mutation.Account(); ok {
		_spec.SetField(entuser.FieldAccount, field.TypeString, value)
	}
	if euuo.mutation.OwnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.RemovedOwnsIDs(); len(nodes) > 0 && !euuo.mutation.OwnsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euuo.mutation.OwnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entuser.OwnsTable,
			Columns: []string{entuser.OwnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntUser{config: euuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euuo.mutation.done = true
	return _node, nil
}
