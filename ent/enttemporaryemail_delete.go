// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/predicate"
)

// EntTemporaryEmailDelete is the builder for deleting a EntTemporaryEmail entity.
type EntTemporaryEmailDelete struct {
	config
	hooks    []Hook
	mutation *EntTemporaryEmailMutation
}

// Where appends a list predicates to the EntTemporaryEmailDelete builder.
func (eted *EntTemporaryEmailDelete) Where(ps ...predicate.EntTemporaryEmail) *EntTemporaryEmailDelete {
	eted.mutation.Where(ps...)
	return eted
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (eted *EntTemporaryEmailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, eted.sqlExec, eted.mutation, eted.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (eted *EntTemporaryEmailDelete) ExecX(ctx context.Context) int {
	n, err := eted.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (eted *EntTemporaryEmailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(enttemporaryemail.Table, sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt))
	if ps := eted.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, eted.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	eted.mutation.done = true
	return affected, err
}

// EntTemporaryEmailDeleteOne is the builder for deleting a single EntTemporaryEmail entity.
type EntTemporaryEmailDeleteOne struct {
	eted *EntTemporaryEmailDelete
}

// Where appends a list predicates to the EntTemporaryEmailDelete builder.
func (etedo *EntTemporaryEmailDeleteOne) Where(ps ...predicate.EntTemporaryEmail) *EntTemporaryEmailDeleteOne {
	etedo.eted.mutation.Where(ps...)
	return etedo
}

// Exec executes the deletion query.
func (etedo *EntTemporaryEmailDeleteOne) Exec(ctx context.Context) error {
	n, err := etedo.eted.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{enttemporaryemail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (etedo *EntTemporaryEmailDeleteOne) ExecX(ctx context.Context) {
	if err := etedo.Exec(ctx); err != nil {
		panic(err)
	}
}
