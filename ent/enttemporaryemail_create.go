// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
)

// EntTemporaryEmailCreate is the builder for creating a EntTemporaryEmail entity.
type EntTemporaryEmailCreate struct {
	config
	mutation *EntTemporaryEmailMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (etec *EntTemporaryEmailCreate) SetEmail(s string) *EntTemporaryEmailCreate {
	etec.mutation.SetEmail(s)
	return etec
}

// SetOwnerID sets the "owner" edge to the EntUser entity by ID.
func (etec *EntTemporaryEmailCreate) SetOwnerID(id int) *EntTemporaryEmailCreate {
	etec.mutation.SetOwnerID(id)
	return etec
}

// SetNillableOwnerID sets the "owner" edge to the EntUser entity by ID if the given value is not nil.
func (etec *EntTemporaryEmailCreate) SetNillableOwnerID(id *int) *EntTemporaryEmailCreate {
	if id != nil {
		etec = etec.SetOwnerID(*id)
	}
	return etec
}

// SetOwner sets the "owner" edge to the EntUser entity.
func (etec *EntTemporaryEmailCreate) SetOwner(e *EntUser) *EntTemporaryEmailCreate {
	return etec.SetOwnerID(e.ID)
}

// Mutation returns the EntTemporaryEmailMutation object of the builder.
func (etec *EntTemporaryEmailCreate) Mutation() *EntTemporaryEmailMutation {
	return etec.mutation
}

// Save creates the EntTemporaryEmail in the database.
func (etec *EntTemporaryEmailCreate) Save(ctx context.Context) (*EntTemporaryEmail, error) {
	return withHooks(ctx, etec.sqlSave, etec.mutation, etec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etec *EntTemporaryEmailCreate) SaveX(ctx context.Context) *EntTemporaryEmail {
	v, err := etec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etec *EntTemporaryEmailCreate) Exec(ctx context.Context) error {
	_, err := etec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etec *EntTemporaryEmailCreate) ExecX(ctx context.Context) {
	if err := etec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etec *EntTemporaryEmailCreate) check() error {
	if _, ok := etec.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "EntTemporaryEmail.email"`)}
	}
	return nil
}

func (etec *EntTemporaryEmailCreate) sqlSave(ctx context.Context) (*EntTemporaryEmail, error) {
	if err := etec.check(); err != nil {
		return nil, err
	}
	_node, _spec := etec.createSpec()
	if err := sqlgraph.CreateNode(ctx, etec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	etec.mutation.id = &_node.ID
	etec.mutation.done = true
	return _node, nil
}

func (etec *EntTemporaryEmailCreate) createSpec() (*EntTemporaryEmail, *sqlgraph.CreateSpec) {
	var (
		_node = &EntTemporaryEmail{config: etec.config}
		_spec = sqlgraph.NewCreateSpec(enttemporaryemail.Table, sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt))
	)
	if value, ok := etec.mutation.Email(); ok {
		_spec.SetField(enttemporaryemail.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if nodes := etec.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enttemporaryemail.OwnerTable,
			Columns: []string{enttemporaryemail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ent_user_owns = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntTemporaryEmailCreateBulk is the builder for creating many EntTemporaryEmail entities in bulk.
type EntTemporaryEmailCreateBulk struct {
	config
	err      error
	builders []*EntTemporaryEmailCreate
}

// Save creates the EntTemporaryEmail entities in the database.
func (etecb *EntTemporaryEmailCreateBulk) Save(ctx context.Context) ([]*EntTemporaryEmail, error) {
	if etecb.err != nil {
		return nil, etecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etecb.builders))
	nodes := make([]*EntTemporaryEmail, len(etecb.builders))
	mutators := make([]Mutator, len(etecb.builders))
	for i := range etecb.builders {
		func(i int, root context.Context) {
			builder := etecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntTemporaryEmailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etecb *EntTemporaryEmailCreateBulk) SaveX(ctx context.Context) []*EntTemporaryEmail {
	v, err := etecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etecb *EntTemporaryEmailCreateBulk) Exec(ctx context.Context) error {
	_, err := etecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etecb *EntTemporaryEmailCreateBulk) ExecX(ctx context.Context) {
	if err := etecb.Exec(ctx); err != nil {
		panic(err)
	}
}
