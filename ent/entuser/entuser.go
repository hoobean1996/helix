// Code generated by ent, DO NOT EDIT.

package entuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entuser type in the database.
	Label = "ent_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// EdgeOwns holds the string denoting the owns edge name in mutations.
	EdgeOwns = "owns"
	// Table holds the table name of the entuser in the database.
	Table = "ent_users"
	// OwnsTable is the table that holds the owns relation/edge.
	OwnsTable = "ent_temporary_emails"
	// OwnsInverseTable is the table name for the EntTemporaryEmail entity.
	// It exists in this package in order to avoid circular dependency with the "enttemporaryemail" package.
	OwnsInverseTable = "ent_temporary_emails"
	// OwnsColumn is the table column denoting the owns relation/edge.
	OwnsColumn = "ent_user_owns"
)

// Columns holds all SQL columns for entuser fields.
var Columns = []string{
	FieldID,
	FieldAccount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EntUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByOwnsCount orders the results by owns count.
func ByOwnsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnsStep(), opts...)
	}
}

// ByOwns orders the results by owns terms.
func ByOwns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnsTable, OwnsColumn),
	)
}
