// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
)

// EntTemporaryEmail is the model entity for the EntTemporaryEmail schema.
type EntTemporaryEmail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// test@vmail.today
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntTemporaryEmailQuery when eager-loading is set.
	Edges         EntTemporaryEmailEdges `json:"edges"`
	ent_user_owns *int
	selectValues  sql.SelectValues
}

// EntTemporaryEmailEdges holds the relations/edges for other nodes in the graph.
type EntTemporaryEmailEdges struct {
	// Owner holds the value of the owner edge.
	Owner *EntUser `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntTemporaryEmailEdges) OwnerOrErr() (*EntUser, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entuser.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntTemporaryEmail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enttemporaryemail.FieldID:
			values[i] = new(sql.NullInt64)
		case enttemporaryemail.FieldEmail:
			values[i] = new(sql.NullString)
		case enttemporaryemail.ForeignKeys[0]: // ent_user_owns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntTemporaryEmail fields.
func (ete *EntTemporaryEmail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enttemporaryemail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ete.ID = int(value.Int64)
		case enttemporaryemail.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ete.Email = value.String
			}
		case enttemporaryemail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_user_owns", value)
			} else if value.Valid {
				ete.ent_user_owns = new(int)
				*ete.ent_user_owns = int(value.Int64)
			}
		default:
			ete.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntTemporaryEmail.
// This includes values selected through modifiers, order, etc.
func (ete *EntTemporaryEmail) Value(name string) (ent.Value, error) {
	return ete.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the EntTemporaryEmail entity.
func (ete *EntTemporaryEmail) QueryOwner() *EntUserQuery {
	return NewEntTemporaryEmailClient(ete.config).QueryOwner(ete)
}

// Update returns a builder for updating this EntTemporaryEmail.
// Note that you need to call EntTemporaryEmail.Unwrap() before calling this method if this EntTemporaryEmail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ete *EntTemporaryEmail) Update() *EntTemporaryEmailUpdateOne {
	return NewEntTemporaryEmailClient(ete.config).UpdateOne(ete)
}

// Unwrap unwraps the EntTemporaryEmail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ete *EntTemporaryEmail) Unwrap() *EntTemporaryEmail {
	_tx, ok := ete.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntTemporaryEmail is not a transactional entity")
	}
	ete.config.driver = _tx.drv
	return ete
}

// String implements the fmt.Stringer.
func (ete *EntTemporaryEmail) String() string {
	var builder strings.Builder
	builder.WriteString("EntTemporaryEmail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ete.ID))
	builder.WriteString("email=")
	builder.WriteString(ete.Email)
	builder.WriteByte(')')
	return builder.String()
}

// EntTemporaryEmails is a parsable slice of EntTemporaryEmail.
type EntTemporaryEmails []*EntTemporaryEmail
