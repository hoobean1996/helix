// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"helix.io/helix/ent/entuser"
)

// EntUser is the model entity for the EntUser schema.
type EntUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// user's real email
	Account string `json:"account,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntUserQuery when eager-loading is set.
	Edges        EntUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntUserEdges holds the relations/edges for other nodes in the graph.
type EntUserEdges struct {
	// Owns holds the value of the owns edge.
	Owns []*EntTemporaryEmail `json:"owns,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedOwns map[string][]*EntTemporaryEmail
}

// OwnsOrErr returns the Owns value or an error if the edge
// was not loaded in eager-loading.
func (e EntUserEdges) OwnsOrErr() ([]*EntTemporaryEmail, error) {
	if e.loadedTypes[0] {
		return e.Owns, nil
	}
	return nil, &NotLoadedError{edge: "owns"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entuser.FieldID:
			values[i] = new(sql.NullInt64)
		case entuser.FieldAccount:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntUser fields.
func (eu *EntUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eu.ID = int(value.Int64)
		case entuser.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				eu.Account = value.String
			}
		default:
			eu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntUser.
// This includes values selected through modifiers, order, etc.
func (eu *EntUser) Value(name string) (ent.Value, error) {
	return eu.selectValues.Get(name)
}

// QueryOwns queries the "owns" edge of the EntUser entity.
func (eu *EntUser) QueryOwns() *EntTemporaryEmailQuery {
	return NewEntUserClient(eu.config).QueryOwns(eu)
}

// Update returns a builder for updating this EntUser.
// Note that you need to call EntUser.Unwrap() before calling this method if this EntUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (eu *EntUser) Update() *EntUserUpdateOne {
	return NewEntUserClient(eu.config).UpdateOne(eu)
}

// Unwrap unwraps the EntUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eu *EntUser) Unwrap() *EntUser {
	_tx, ok := eu.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntUser is not a transactional entity")
	}
	eu.config.driver = _tx.drv
	return eu
}

// String implements the fmt.Stringer.
func (eu *EntUser) String() string {
	var builder strings.Builder
	builder.WriteString("EntUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eu.ID))
	builder.WriteString("account=")
	builder.WriteString(eu.Account)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOwns returns the Owns named value or an error if the edge was not
// loaded in eager-loading with this name.
func (eu *EntUser) NamedOwns(name string) ([]*EntTemporaryEmail, error) {
	if eu.Edges.namedOwns == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := eu.Edges.namedOwns[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (eu *EntUser) appendNamedOwns(name string, edges ...*EntTemporaryEmail) {
	if eu.Edges.namedOwns == nil {
		eu.Edges.namedOwns = make(map[string][]*EntTemporaryEmail)
	}
	if len(edges) == 0 {
		eu.Edges.namedOwns[name] = []*EntTemporaryEmail{}
	} else {
		eu.Edges.namedOwns[name] = append(eu.Edges.namedOwns[name], edges...)
	}
}

// EntUsers is a parsable slice of EntUser.
type EntUsers []*EntUser
