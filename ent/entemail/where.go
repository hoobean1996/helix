// Code generated by ent, DO NOT EDIT.

package entemail

import (
	"entgo.io/ent/dialect/sql"
	"helix.io/helix/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLTE(FieldID, id))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldFrom, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldDate, v))
}

// Topic applies equality check predicate on the "topic" field. It's identical to TopicEQ.
func Topic(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldTopic, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldBody, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContainsFold(FieldFrom, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContainsFold(FieldDate, v))
}

// TopicEQ applies the EQ predicate on the "topic" field.
func TopicEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldTopic, v))
}

// TopicNEQ applies the NEQ predicate on the "topic" field.
func TopicNEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNEQ(FieldTopic, v))
}

// TopicIn applies the In predicate on the "topic" field.
func TopicIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldIn(FieldTopic, vs...))
}

// TopicNotIn applies the NotIn predicate on the "topic" field.
func TopicNotIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNotIn(FieldTopic, vs...))
}

// TopicGT applies the GT predicate on the "topic" field.
func TopicGT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGT(FieldTopic, v))
}

// TopicGTE applies the GTE predicate on the "topic" field.
func TopicGTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGTE(FieldTopic, v))
}

// TopicLT applies the LT predicate on the "topic" field.
func TopicLT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLT(FieldTopic, v))
}

// TopicLTE applies the LTE predicate on the "topic" field.
func TopicLTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLTE(FieldTopic, v))
}

// TopicContains applies the Contains predicate on the "topic" field.
func TopicContains(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContains(FieldTopic, v))
}

// TopicHasPrefix applies the HasPrefix predicate on the "topic" field.
func TopicHasPrefix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasPrefix(FieldTopic, v))
}

// TopicHasSuffix applies the HasSuffix predicate on the "topic" field.
func TopicHasSuffix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasSuffix(FieldTopic, v))
}

// TopicEqualFold applies the EqualFold predicate on the "topic" field.
func TopicEqualFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEqualFold(FieldTopic, v))
}

// TopicContainsFold applies the ContainsFold predicate on the "topic" field.
func TopicContainsFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContainsFold(FieldTopic, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.EntEmail {
	return predicate.EntEmail(sql.FieldContainsFold(FieldBody, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntEmail) predicate.EntEmail {
	return predicate.EntEmail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntEmail) predicate.EntEmail {
	return predicate.EntEmail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntEmail) predicate.EntEmail {
	return predicate.EntEmail(sql.NotPredicates(p))
}
