// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
	"helix.io/helix/ent/predicate"
)

// EntTemporaryEmailUpdate is the builder for updating EntTemporaryEmail entities.
type EntTemporaryEmailUpdate struct {
	config
	hooks    []Hook
	mutation *EntTemporaryEmailMutation
}

// Where appends a list predicates to the EntTemporaryEmailUpdate builder.
func (eteu *EntTemporaryEmailUpdate) Where(ps ...predicate.EntTemporaryEmail) *EntTemporaryEmailUpdate {
	eteu.mutation.Where(ps...)
	return eteu
}

// SetEmail sets the "email" field.
func (eteu *EntTemporaryEmailUpdate) SetEmail(s string) *EntTemporaryEmailUpdate {
	eteu.mutation.SetEmail(s)
	return eteu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (eteu *EntTemporaryEmailUpdate) SetNillableEmail(s *string) *EntTemporaryEmailUpdate {
	if s != nil {
		eteu.SetEmail(*s)
	}
	return eteu
}

// SetOwnerID sets the "owner" edge to the EntUser entity by ID.
func (eteu *EntTemporaryEmailUpdate) SetOwnerID(id int) *EntTemporaryEmailUpdate {
	eteu.mutation.SetOwnerID(id)
	return eteu
}

// SetNillableOwnerID sets the "owner" edge to the EntUser entity by ID if the given value is not nil.
func (eteu *EntTemporaryEmailUpdate) SetNillableOwnerID(id *int) *EntTemporaryEmailUpdate {
	if id != nil {
		eteu = eteu.SetOwnerID(*id)
	}
	return eteu
}

// SetOwner sets the "owner" edge to the EntUser entity.
func (eteu *EntTemporaryEmailUpdate) SetOwner(e *EntUser) *EntTemporaryEmailUpdate {
	return eteu.SetOwnerID(e.ID)
}

// Mutation returns the EntTemporaryEmailMutation object of the builder.
func (eteu *EntTemporaryEmailUpdate) Mutation() *EntTemporaryEmailMutation {
	return eteu.mutation
}

// ClearOwner clears the "owner" edge to the EntUser entity.
func (eteu *EntTemporaryEmailUpdate) ClearOwner() *EntTemporaryEmailUpdate {
	eteu.mutation.ClearOwner()
	return eteu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eteu *EntTemporaryEmailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eteu.sqlSave, eteu.mutation, eteu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eteu *EntTemporaryEmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eteu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eteu *EntTemporaryEmailUpdate) Exec(ctx context.Context) error {
	_, err := eteu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eteu *EntTemporaryEmailUpdate) ExecX(ctx context.Context) {
	if err := eteu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eteu *EntTemporaryEmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttemporaryemail.Table, enttemporaryemail.Columns, sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt))
	if ps := eteu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eteu.mutation.Email(); ok {
		_spec.SetField(enttemporaryemail.FieldEmail, field.TypeString, value)
	}
	if eteu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enttemporaryemail.OwnerTable,
			Columns: []string{enttemporaryemail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eteu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enttemporaryemail.OwnerTable,
			Columns: []string{enttemporaryemail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eteu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttemporaryemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eteu.mutation.done = true
	return n, nil
}

// EntTemporaryEmailUpdateOne is the builder for updating a single EntTemporaryEmail entity.
type EntTemporaryEmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntTemporaryEmailMutation
}

// SetEmail sets the "email" field.
func (eteuo *EntTemporaryEmailUpdateOne) SetEmail(s string) *EntTemporaryEmailUpdateOne {
	eteuo.mutation.SetEmail(s)
	return eteuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (eteuo *EntTemporaryEmailUpdateOne) SetNillableEmail(s *string) *EntTemporaryEmailUpdateOne {
	if s != nil {
		eteuo.SetEmail(*s)
	}
	return eteuo
}

// SetOwnerID sets the "owner" edge to the EntUser entity by ID.
func (eteuo *EntTemporaryEmailUpdateOne) SetOwnerID(id int) *EntTemporaryEmailUpdateOne {
	eteuo.mutation.SetOwnerID(id)
	return eteuo
}

// SetNillableOwnerID sets the "owner" edge to the EntUser entity by ID if the given value is not nil.
func (eteuo *EntTemporaryEmailUpdateOne) SetNillableOwnerID(id *int) *EntTemporaryEmailUpdateOne {
	if id != nil {
		eteuo = eteuo.SetOwnerID(*id)
	}
	return eteuo
}

// SetOwner sets the "owner" edge to the EntUser entity.
func (eteuo *EntTemporaryEmailUpdateOne) SetOwner(e *EntUser) *EntTemporaryEmailUpdateOne {
	return eteuo.SetOwnerID(e.ID)
}

// Mutation returns the EntTemporaryEmailMutation object of the builder.
func (eteuo *EntTemporaryEmailUpdateOne) Mutation() *EntTemporaryEmailMutation {
	return eteuo.mutation
}

// ClearOwner clears the "owner" edge to the EntUser entity.
func (eteuo *EntTemporaryEmailUpdateOne) ClearOwner() *EntTemporaryEmailUpdateOne {
	eteuo.mutation.ClearOwner()
	return eteuo
}

// Where appends a list predicates to the EntTemporaryEmailUpdate builder.
func (eteuo *EntTemporaryEmailUpdateOne) Where(ps ...predicate.EntTemporaryEmail) *EntTemporaryEmailUpdateOne {
	eteuo.mutation.Where(ps...)
	return eteuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eteuo *EntTemporaryEmailUpdateOne) Select(field string, fields ...string) *EntTemporaryEmailUpdateOne {
	eteuo.fields = append([]string{field}, fields...)
	return eteuo
}

// Save executes the query and returns the updated EntTemporaryEmail entity.
func (eteuo *EntTemporaryEmailUpdateOne) Save(ctx context.Context) (*EntTemporaryEmail, error) {
	return withHooks(ctx, eteuo.sqlSave, eteuo.mutation, eteuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eteuo *EntTemporaryEmailUpdateOne) SaveX(ctx context.Context) *EntTemporaryEmail {
	node, err := eteuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eteuo *EntTemporaryEmailUpdateOne) Exec(ctx context.Context) error {
	_, err := eteuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eteuo *EntTemporaryEmailUpdateOne) ExecX(ctx context.Context) {
	if err := eteuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eteuo *EntTemporaryEmailUpdateOne) sqlSave(ctx context.Context) (_node *EntTemporaryEmail, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttemporaryemail.Table, enttemporaryemail.Columns, sqlgraph.NewFieldSpec(enttemporaryemail.FieldID, field.TypeInt))
	id, ok := eteuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntTemporaryEmail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eteuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttemporaryemail.FieldID)
		for _, f := range fields {
			if !enttemporaryemail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enttemporaryemail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eteuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eteuo.mutation.Email(); ok {
		_spec.SetField(enttemporaryemail.FieldEmail, field.TypeString, value)
	}
	if eteuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enttemporaryemail.OwnerTable,
			Columns: []string{enttemporaryemail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eteuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enttemporaryemail.OwnerTable,
			Columns: []string{enttemporaryemail.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntTemporaryEmail{config: eteuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eteuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttemporaryemail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eteuo.mutation.done = true
	return _node, nil
}
