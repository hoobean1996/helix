// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"helix.io/helix/ent/entemail"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
	"helix.io/helix/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntEmail          = "EntEmail"
	TypeEntTemporaryEmail = "EntTemporaryEmail"
	TypeEntUser           = "EntUser"
)

// EntEmailMutation represents an operation that mutates the EntEmail nodes in the graph.
type EntEmailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	from          *string
	to            *[]string
	appendto      []string
	date          *string
	topic         *string
	body          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EntEmail, error)
	predicates    []predicate.EntEmail
}

var _ ent.Mutation = (*EntEmailMutation)(nil)

// entemailOption allows management of the mutation configuration using functional options.
type entemailOption func(*EntEmailMutation)

// newEntEmailMutation creates new mutation for the EntEmail entity.
func newEntEmailMutation(c config, op Op, opts ...entemailOption) *EntEmailMutation {
	m := &EntEmailMutation{
		config:        c,
		op:            op,
		typ:           TypeEntEmail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntEmailID sets the ID field of the mutation.
func withEntEmailID(id int) entemailOption {
	return func(m *EntEmailMutation) {
		var (
			err   error
			once  sync.Once
			value *EntEmail
		)
		m.oldValue = func(ctx context.Context) (*EntEmail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntEmail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntEmail sets the old EntEmail of the mutation.
func withEntEmail(node *EntEmail) entemailOption {
	return func(m *EntEmailMutation) {
		m.oldValue = func(context.Context) (*EntEmail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntEmailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntEmailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntEmailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntEmailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntEmail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFrom sets the "from" field.
func (m *EntEmailMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *EntEmailMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the EntEmail entity.
// If the EntEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntEmailMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "from" field.
func (m *EntEmailMutation) ResetFrom() {
	m.from = nil
}

// SetTo sets the "to" field.
func (m *EntEmailMutation) SetTo(s []string) {
	m.to = &s
	m.appendto = nil
}

// To returns the value of the "to" field in the mutation.
func (m *EntEmailMutation) To() (r []string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the EntEmail entity.
// If the EntEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntEmailMutation) OldTo(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// AppendTo adds s to the "to" field.
func (m *EntEmailMutation) AppendTo(s []string) {
	m.appendto = append(m.appendto, s...)
}

// AppendedTo returns the list of values that were appended to the "to" field in this mutation.
func (m *EntEmailMutation) AppendedTo() ([]string, bool) {
	if len(m.appendto) == 0 {
		return nil, false
	}
	return m.appendto, true
}

// ResetTo resets all changes to the "to" field.
func (m *EntEmailMutation) ResetTo() {
	m.to = nil
	m.appendto = nil
}

// SetDate sets the "date" field.
func (m *EntEmailMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *EntEmailMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the EntEmail entity.
// If the EntEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntEmailMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *EntEmailMutation) ResetDate() {
	m.date = nil
}

// SetTopic sets the "topic" field.
func (m *EntEmailMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *EntEmailMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the EntEmail entity.
// If the EntEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntEmailMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *EntEmailMutation) ResetTopic() {
	m.topic = nil
}

// SetBody sets the "body" field.
func (m *EntEmailMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *EntEmailMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the EntEmail entity.
// If the EntEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntEmailMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *EntEmailMutation) ResetBody() {
	m.body = nil
}

// Where appends a list predicates to the EntEmailMutation builder.
func (m *EntEmailMutation) Where(ps ...predicate.EntEmail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntEmailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntEmailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntEmail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntEmailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntEmailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntEmail).
func (m *EntEmailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntEmailMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.from != nil {
		fields = append(fields, entemail.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, entemail.FieldTo)
	}
	if m.date != nil {
		fields = append(fields, entemail.FieldDate)
	}
	if m.topic != nil {
		fields = append(fields, entemail.FieldTopic)
	}
	if m.body != nil {
		fields = append(fields, entemail.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntEmailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entemail.FieldFrom:
		return m.From()
	case entemail.FieldTo:
		return m.To()
	case entemail.FieldDate:
		return m.Date()
	case entemail.FieldTopic:
		return m.Topic()
	case entemail.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntEmailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entemail.FieldFrom:
		return m.OldFrom(ctx)
	case entemail.FieldTo:
		return m.OldTo(ctx)
	case entemail.FieldDate:
		return m.OldDate(ctx)
	case entemail.FieldTopic:
		return m.OldTopic(ctx)
	case entemail.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown EntEmail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntEmailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entemail.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case entemail.FieldTo:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	case entemail.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case entemail.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case entemail.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown EntEmail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntEmailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntEmailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntEmailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntEmail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntEmailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntEmailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntEmailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntEmail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntEmailMutation) ResetField(name string) error {
	switch name {
	case entemail.FieldFrom:
		m.ResetFrom()
		return nil
	case entemail.FieldTo:
		m.ResetTo()
		return nil
	case entemail.FieldDate:
		m.ResetDate()
		return nil
	case entemail.FieldTopic:
		m.ResetTopic()
		return nil
	case entemail.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown EntEmail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntEmailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntEmailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntEmailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntEmailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntEmailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntEmailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntEmailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EntEmail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntEmailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EntEmail edge %s", name)
}

// EntTemporaryEmailMutation represents an operation that mutates the EntTemporaryEmail nodes in the graph.
type EntTemporaryEmailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*EntTemporaryEmail, error)
	predicates    []predicate.EntTemporaryEmail
}

var _ ent.Mutation = (*EntTemporaryEmailMutation)(nil)

// enttemporaryemailOption allows management of the mutation configuration using functional options.
type enttemporaryemailOption func(*EntTemporaryEmailMutation)

// newEntTemporaryEmailMutation creates new mutation for the EntTemporaryEmail entity.
func newEntTemporaryEmailMutation(c config, op Op, opts ...enttemporaryemailOption) *EntTemporaryEmailMutation {
	m := &EntTemporaryEmailMutation{
		config:        c,
		op:            op,
		typ:           TypeEntTemporaryEmail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntTemporaryEmailID sets the ID field of the mutation.
func withEntTemporaryEmailID(id int) enttemporaryemailOption {
	return func(m *EntTemporaryEmailMutation) {
		var (
			err   error
			once  sync.Once
			value *EntTemporaryEmail
		)
		m.oldValue = func(ctx context.Context) (*EntTemporaryEmail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntTemporaryEmail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntTemporaryEmail sets the old EntTemporaryEmail of the mutation.
func withEntTemporaryEmail(node *EntTemporaryEmail) enttemporaryemailOption {
	return func(m *EntTemporaryEmailMutation) {
		m.oldValue = func(context.Context) (*EntTemporaryEmail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntTemporaryEmailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntTemporaryEmailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntTemporaryEmailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntTemporaryEmailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntTemporaryEmail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *EntTemporaryEmailMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *EntTemporaryEmailMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the EntTemporaryEmail entity.
// If the EntTemporaryEmail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntTemporaryEmailMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *EntTemporaryEmailMutation) ResetEmail() {
	m.email = nil
}

// SetOwnerID sets the "owner" edge to the EntUser entity by id.
func (m *EntTemporaryEmailMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the EntUser entity.
func (m *EntTemporaryEmailMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the EntUser entity was cleared.
func (m *EntTemporaryEmailMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *EntTemporaryEmailMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EntTemporaryEmailMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EntTemporaryEmailMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the EntTemporaryEmailMutation builder.
func (m *EntTemporaryEmailMutation) Where(ps ...predicate.EntTemporaryEmail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntTemporaryEmailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntTemporaryEmailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntTemporaryEmail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntTemporaryEmailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntTemporaryEmailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntTemporaryEmail).
func (m *EntTemporaryEmailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntTemporaryEmailMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.email != nil {
		fields = append(fields, enttemporaryemail.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntTemporaryEmailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enttemporaryemail.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntTemporaryEmailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enttemporaryemail.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown EntTemporaryEmail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntTemporaryEmailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enttemporaryemail.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown EntTemporaryEmail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntTemporaryEmailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntTemporaryEmailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntTemporaryEmailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntTemporaryEmail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntTemporaryEmailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntTemporaryEmailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntTemporaryEmailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntTemporaryEmail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntTemporaryEmailMutation) ResetField(name string) error {
	switch name {
	case enttemporaryemail.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown EntTemporaryEmail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntTemporaryEmailMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, enttemporaryemail.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntTemporaryEmailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enttemporaryemail.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntTemporaryEmailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntTemporaryEmailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntTemporaryEmailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, enttemporaryemail.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntTemporaryEmailMutation) EdgeCleared(name string) bool {
	switch name {
	case enttemporaryemail.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntTemporaryEmailMutation) ClearEdge(name string) error {
	switch name {
	case enttemporaryemail.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown EntTemporaryEmail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntTemporaryEmailMutation) ResetEdge(name string) error {
	switch name {
	case enttemporaryemail.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown EntTemporaryEmail edge %s", name)
}

// EntUserMutation represents an operation that mutates the EntUser nodes in the graph.
type EntUserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	account       *string
	clearedFields map[string]struct{}
	owns          map[int]struct{}
	removedowns   map[int]struct{}
	clearedowns   bool
	done          bool
	oldValue      func(context.Context) (*EntUser, error)
	predicates    []predicate.EntUser
}

var _ ent.Mutation = (*EntUserMutation)(nil)

// entuserOption allows management of the mutation configuration using functional options.
type entuserOption func(*EntUserMutation)

// newEntUserMutation creates new mutation for the EntUser entity.
func newEntUserMutation(c config, op Op, opts ...entuserOption) *EntUserMutation {
	m := &EntUserMutation{
		config:        c,
		op:            op,
		typ:           TypeEntUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntUserID sets the ID field of the mutation.
func withEntUserID(id int) entuserOption {
	return func(m *EntUserMutation) {
		var (
			err   error
			once  sync.Once
			value *EntUser
		)
		m.oldValue = func(ctx context.Context) (*EntUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntUser sets the old EntUser of the mutation.
func withEntUser(node *EntUser) entuserOption {
	return func(m *EntUserMutation) {
		m.oldValue = func(context.Context) (*EntUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntUserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccount sets the "account" field.
func (m *EntUserMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *EntUserMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the EntUser entity.
// If the EntUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntUserMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *EntUserMutation) ResetAccount() {
	m.account = nil
}

// AddOwnIDs adds the "owns" edge to the EntTemporaryEmail entity by ids.
func (m *EntUserMutation) AddOwnIDs(ids ...int) {
	if m.owns == nil {
		m.owns = make(map[int]struct{})
	}
	for i := range ids {
		m.owns[ids[i]] = struct{}{}
	}
}

// ClearOwns clears the "owns" edge to the EntTemporaryEmail entity.
func (m *EntUserMutation) ClearOwns() {
	m.clearedowns = true
}

// OwnsCleared reports if the "owns" edge to the EntTemporaryEmail entity was cleared.
func (m *EntUserMutation) OwnsCleared() bool {
	return m.clearedowns
}

// RemoveOwnIDs removes the "owns" edge to the EntTemporaryEmail entity by IDs.
func (m *EntUserMutation) RemoveOwnIDs(ids ...int) {
	if m.removedowns == nil {
		m.removedowns = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.owns, ids[i])
		m.removedowns[ids[i]] = struct{}{}
	}
}

// RemovedOwns returns the removed IDs of the "owns" edge to the EntTemporaryEmail entity.
func (m *EntUserMutation) RemovedOwnsIDs() (ids []int) {
	for id := range m.removedowns {
		ids = append(ids, id)
	}
	return
}

// OwnsIDs returns the "owns" edge IDs in the mutation.
func (m *EntUserMutation) OwnsIDs() (ids []int) {
	for id := range m.owns {
		ids = append(ids, id)
	}
	return
}

// ResetOwns resets all changes to the "owns" edge.
func (m *EntUserMutation) ResetOwns() {
	m.owns = nil
	m.clearedowns = false
	m.removedowns = nil
}

// Where appends a list predicates to the EntUserMutation builder.
func (m *EntUserMutation) Where(ps ...predicate.EntUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntUser).
func (m *EntUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntUserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.account != nil {
		fields = append(fields, entuser.FieldAccount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entuser.FieldAccount:
		return m.Account()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entuser.FieldAccount:
		return m.OldAccount(ctx)
	}
	return nil, fmt.Errorf("unknown EntUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entuser.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	}
	return fmt.Errorf("unknown EntUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EntUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EntUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntUserMutation) ResetField(name string) error {
	switch name {
	case entuser.FieldAccount:
		m.ResetAccount()
		return nil
	}
	return fmt.Errorf("unknown EntUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owns != nil {
		edges = append(edges, entuser.EdgeOwns)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entuser.EdgeOwns:
		ids := make([]ent.Value, 0, len(m.owns))
		for id := range m.owns {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedowns != nil {
		edges = append(edges, entuser.EdgeOwns)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entuser.EdgeOwns:
		ids := make([]ent.Value, 0, len(m.removedowns))
		for id := range m.removedowns {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowns {
		edges = append(edges, entuser.EdgeOwns)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntUserMutation) EdgeCleared(name string) bool {
	switch name {
	case entuser.EdgeOwns:
		return m.clearedowns
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EntUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntUserMutation) ResetEdge(name string) error {
	switch name {
	case entuser.EdgeOwns:
		m.ResetOwns()
		return nil
	}
	return fmt.Errorf("unknown EntUser edge %s", name)
}
