// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"helix.io/helix/ent/entemail"
)

// EntEmail is the model entity for the EntEmail schema.
type EntEmail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To []string `json:"to,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// Topic holds the value of the "topic" field.
	Topic string `json:"topic,omitempty"`
	// Body holds the value of the "body" field.
	Body         string `json:"body,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntEmail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entemail.FieldTo:
			values[i] = new([]byte)
		case entemail.FieldID:
			values[i] = new(sql.NullInt64)
		case entemail.FieldFrom, entemail.FieldDate, entemail.FieldTopic, entemail.FieldBody:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntEmail fields.
func (ee *EntEmail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entemail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ee.ID = int(value.Int64)
		case entemail.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				ee.From = value.String
			}
		case entemail.FieldTo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ee.To); err != nil {
					return fmt.Errorf("unmarshal field to: %w", err)
				}
			}
		case entemail.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ee.Date = value.String
			}
		case entemail.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				ee.Topic = value.String
			}
		case entemail.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				ee.Body = value.String
			}
		default:
			ee.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntEmail.
// This includes values selected through modifiers, order, etc.
func (ee *EntEmail) Value(name string) (ent.Value, error) {
	return ee.selectValues.Get(name)
}

// Update returns a builder for updating this EntEmail.
// Note that you need to call EntEmail.Unwrap() before calling this method if this EntEmail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ee *EntEmail) Update() *EntEmailUpdateOne {
	return NewEntEmailClient(ee.config).UpdateOne(ee)
}

// Unwrap unwraps the EntEmail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *EntEmail) Unwrap() *EntEmail {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntEmail is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *EntEmail) String() string {
	var builder strings.Builder
	builder.WriteString("EntEmail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ee.ID))
	builder.WriteString("from=")
	builder.WriteString(ee.From)
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(fmt.Sprintf("%v", ee.To))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(ee.Date)
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(ee.Topic)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(ee.Body)
	builder.WriteByte(')')
	return builder.String()
}

// EntEmails is a parsable slice of EntEmail.
type EntEmails []*EntEmail
