// Code generated by ent, DO NOT EDIT.

package ent

// CreateEntEmailInput represents a mutation input for creating entemails.
type CreateEntEmailInput struct {
	From  string
	To    []string
	Date  string
	Topic string
	Body  string
}

// Mutate applies the CreateEntEmailInput on the EntEmailMutation builder.
func (i *CreateEntEmailInput) Mutate(m *EntEmailMutation) {
	m.SetFrom(i.From)
	if v := i.To; v != nil {
		m.SetTo(v)
	}
	m.SetDate(i.Date)
	m.SetTopic(i.Topic)
	m.SetBody(i.Body)
}

// SetInput applies the change-set in the CreateEntEmailInput on the EntEmailCreate builder.
func (c *EntEmailCreate) SetInput(i CreateEntEmailInput) *EntEmailCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntTemporaryEmailInput represents a mutation input for creating enttemporaryemails.
type CreateEntTemporaryEmailInput struct {
	Email   string
	OwnerID *int
}

// Mutate applies the CreateEntTemporaryEmailInput on the EntTemporaryEmailMutation builder.
func (i *CreateEntTemporaryEmailInput) Mutate(m *EntTemporaryEmailMutation) {
	m.SetEmail(i.Email)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateEntTemporaryEmailInput on the EntTemporaryEmailCreate builder.
func (c *EntTemporaryEmailCreate) SetInput(i CreateEntTemporaryEmailInput) *EntTemporaryEmailCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntUserInput represents a mutation input for creating entusers.
type CreateEntUserInput struct {
	Account string
	OwnIDs  []int
}

// Mutate applies the CreateEntUserInput on the EntUserMutation builder.
func (i *CreateEntUserInput) Mutate(m *EntUserMutation) {
	m.SetAccount(i.Account)
	if v := i.OwnIDs; len(v) > 0 {
		m.AddOwnIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntUserInput on the EntUserCreate builder.
func (c *EntUserCreate) SetInput(i CreateEntUserInput) *EntUserCreate {
	i.Mutate(c.Mutation())
	return c
}
