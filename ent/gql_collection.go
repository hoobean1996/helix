// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"helix.io/helix/ent/entemail"
	"helix.io/helix/ent/enttemporaryemail"
	"helix.io/helix/ent/entuser"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ee *EntEmailQuery) CollectFields(ctx context.Context, satisfies ...string) (*EntEmailQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ee, nil
	}
	if err := ee.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ee, nil
}

func (ee *EntEmailQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(entemail.Columns))
		selectedFields = []string{entemail.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "from":
			if _, ok := fieldSeen[entemail.FieldFrom]; !ok {
				selectedFields = append(selectedFields, entemail.FieldFrom)
				fieldSeen[entemail.FieldFrom] = struct{}{}
			}
		case "to":
			if _, ok := fieldSeen[entemail.FieldTo]; !ok {
				selectedFields = append(selectedFields, entemail.FieldTo)
				fieldSeen[entemail.FieldTo] = struct{}{}
			}
		case "date":
			if _, ok := fieldSeen[entemail.FieldDate]; !ok {
				selectedFields = append(selectedFields, entemail.FieldDate)
				fieldSeen[entemail.FieldDate] = struct{}{}
			}
		case "topic":
			if _, ok := fieldSeen[entemail.FieldTopic]; !ok {
				selectedFields = append(selectedFields, entemail.FieldTopic)
				fieldSeen[entemail.FieldTopic] = struct{}{}
			}
		case "body":
			if _, ok := fieldSeen[entemail.FieldBody]; !ok {
				selectedFields = append(selectedFields, entemail.FieldBody)
				fieldSeen[entemail.FieldBody] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ee.Select(selectedFields...)
	}
	return nil
}

type entemailPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EntEmailPaginateOption
}

func newEntEmailPaginateArgs(rv map[string]any) *entemailPaginateArgs {
	args := &entemailPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ete *EntTemporaryEmailQuery) CollectFields(ctx context.Context, satisfies ...string) (*EntTemporaryEmailQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ete, nil
	}
	if err := ete.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ete, nil
}

func (ete *EntTemporaryEmailQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(enttemporaryemail.Columns))
		selectedFields = []string{enttemporaryemail.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "owner":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EntUserClient{config: ete.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, entuserImplementors)...); err != nil {
				return err
			}
			ete.withOwner = query
		case "email":
			if _, ok := fieldSeen[enttemporaryemail.FieldEmail]; !ok {
				selectedFields = append(selectedFields, enttemporaryemail.FieldEmail)
				fieldSeen[enttemporaryemail.FieldEmail] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ete.Select(selectedFields...)
	}
	return nil
}

type enttemporaryemailPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EntTemporaryEmailPaginateOption
}

func newEntTemporaryEmailPaginateArgs(rv map[string]any) *enttemporaryemailPaginateArgs {
	args := &enttemporaryemailPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (eu *EntUserQuery) CollectFields(ctx context.Context, satisfies ...string) (*EntUserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return eu, nil
	}
	if err := eu.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return eu, nil
}

func (eu *EntUserQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(entuser.Columns))
		selectedFields = []string{entuser.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "owns":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EntTemporaryEmailClient{config: eu.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, enttemporaryemailImplementors)...); err != nil {
				return err
			}
			eu.WithNamedOwns(alias, func(wq *EntTemporaryEmailQuery) {
				*wq = *query
			})
		case "account":
			if _, ok := fieldSeen[entuser.FieldAccount]; !ok {
				selectedFields = append(selectedFields, entuser.FieldAccount)
				fieldSeen[entuser.FieldAccount] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		eu.Select(selectedFields...)
	}
	return nil
}

type entuserPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EntUserPaginateOption
}

func newEntUserPaginateArgs(rv map[string]any) *entuserPaginateArgs {
	args := &entuserPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
